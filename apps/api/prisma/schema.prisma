generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserActivity {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityType String  // 'login', 'logout', 'page_view', 'action', 'session_timeout', 'session_extended'
  description String?
  metadata    Json?    // Additional data like page URL, action details, etc.
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("user_activities")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String?
  firstName         String
  lastName          String
  phone             String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  announcements     Announcement[]
  instructorSlots   AvailabilitySlot[] @relation("InstructorSlots")
  formSubmissions   FormSubmission[]
  guardian          Guardian?
  mediaAssets       MediaAsset[]
  notifications     Notification[]
  orders            Order[]
  progressNotes     ProgressNote[]
  student           Student?
  testimonials      Testimonial[]      @relation("ApprovedTestimonials")
  userAnnouncements UserNotification[]
  userActivities    UserActivity[]
  roles             UserRole[]

  @@map("users")
}

model Role {
  id    Int        @id @default(autoincrement())
  key   String     @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  userId String
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Student {
  id               String            @id @default(uuid())
  userId           String            @unique
  dateOfBirth      DateTime?
  experienceLevel  String?
  notes            String?
  emergencyContactName      String?
  emergencyContactPhone     String?
  emergencyContactRelationship String?
  medicalConditions         String?
  allergies                String?
  medications              String?
  insuranceProvider        String?
  insurancePolicyNumber    String?
  profilePictureUrl        String?
  formSubmissions  FormSubmission[]
  guardianStudents GuardianStudent[] @relation("StudentGuardians")
  bookings         LessonBooking[]
  packages         StudentPackage[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Guardian {
  id                    String            @id @default(uuid())
  userId                String            @unique
  emergencyContactName  String?
  emergencyContactPhone String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  guardianStudents      GuardianStudent[] @relation("GuardianStudents")
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("guardians")
}

model GuardianStudent {
  guardianId   String
  studentId    String
  relationship String?
  guardian     Guardian @relation("GuardianStudents", fields: [guardianId], references: [id], onDelete: Cascade)
  student      Student  @relation("StudentGuardians", fields: [studentId], references: [id], onDelete: Cascade)

  @@id([guardianId, studentId])
  @@map("guardian_students")
}

model Horse {
  id          String             @id @default(uuid())
  name        String
  breed       String?
  dob         DateTime?
  sex         String?
  temperament Temperament?
  weight      Float?
  height      Float?
  bio         String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  slots       AvailabilitySlot[]

  @@map("horses")
}

model LessonType {
  id              String                @id @default(uuid())
  name            String
  durationMinutes Int
  priceCents      Int
  maxStudents     Int                   @default(1)
  requiresHorse   Boolean               @default(true)
  slots           AvailabilitySlot[]
  templates       LessonBlockTemplate[]
  packages        StudentPackage[]

  @@map("lesson_types")
}

model LessonBlockTemplate {
  id           String     @id @default(uuid())
  instructorId String?
  weekday      Int
  startTime    DateTime
  durationMins Int
  capacity     Int        @default(1)
  lessonTypeId String
  lessonType   LessonType @relation(fields: [lessonTypeId], references: [id])

  @@map("lesson_block_templates")
}

model AvailabilitySlot {
  id           String          @id @default(uuid())
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  instructorId String?
  lessonTypeId String
  capacity     Int             @default(1)
  horseId      String?
  status       SlotStatus      @default(open)
  horse        Horse?          @relation(fields: [horseId], references: [id])
  instructor   User?           @relation("InstructorSlots", fields: [instructorId], references: [id])
  lessonType   LessonType      @relation(fields: [lessonTypeId], references: [id])
  bookings     LessonBooking[]

  @@unique([date, startTime, instructorId])
  @@map("availability_slots")
}

model LessonBooking {
  id              String           @id @default(uuid())
  slotId          String
  studentId       String
  status          BookingStatus    @default(booked)
  paymentSource   String
  stripePaymentId String?
  notes           String?
  createdAt       DateTime         @default(now())
  slot            AvailabilitySlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  student         Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  progressNotes   ProgressNote[]

  @@map("lesson_bookings")
}

model ProgressNote {
  id              String        @id @default(uuid())
  lessonBookingId String
  instructorId    String
  rating          Int?
  skillsJson      Json?
  noteText        String?
  createdAt       DateTime      @default(now())
  instructor      User          @relation(fields: [instructorId], references: [id])
  lessonBooking   LessonBooking @relation(fields: [lessonBookingId], references: [id], onDelete: Cascade)

  @@map("progress_notes")
}

model StudentPackage {
  id               String     @id @default(uuid())
  studentId        String
  lessonTypeId     String
  lessonsIncluded  Int
  remainingLessons Int
  expiresAt        DateTime?
  stripePaymentId  String?
  status           String
  createdAt        DateTime   @default(now())
  lessonType       LessonType @relation(fields: [lessonTypeId], references: [id])
  student          Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_packages")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  type        ProductType
  priceCents  Int
  stockQty    Int?
  description String
  media       String[]
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  status           OrderStatus @default(pending)
  subtotalCents    Int
  taxCents         Int
  shippingCents    Int
  totalCents       Int
  stripeCheckoutId String?
  createdAt        DateTime    @default(now())
  orderItems       OrderItem[]
  user             User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id             String  @id @default(uuid())
  orderId        String
  productId      String
  quantity       Int
  unitPriceCents Int
  metaJson       Json?
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model MediaAsset {
  id          String   @id @default(uuid())
  ownerUserId String?
  kind        String
  url         String
  altText     String?
  source      String
  publishedAt DateTime @default(now())
  owner       User?    @relation(fields: [ownerUserId], references: [id])

  @@map("media_assets")
}

model Testimonial {
  id               String   @id @default(uuid())
  authorName       String
  photoUrl         String?
  quote            String
  approvedByUserId String?
  isPublished      Boolean  @default(false)
  createdAt        DateTime @default(now())
  approvedBy       User?    @relation("ApprovedTestimonials", fields: [approvedByUserId], references: [id])

  @@map("testimonials")
}

model FormTemplate {
  id            String           @id @default(uuid())
  key           String           @unique
  title         String
  schemaJson    Json
  renderVersion Int              @default(1)
  createdAt     DateTime         @default(now())
  submissions   FormSubmission[]

  @@map("form_templates")
}

model FormSubmission {
  id             String       @id @default(uuid())
  formTemplateId String
  userId         String?
  studentId      String?
  dataJson       Json
  signedPdfUrl   String?
  signatureBlob  String?
  signedAt       DateTime?
  ipAddress      String
  createdAt      DateTime     @default(now())
  formTemplate   FormTemplate @relation(fields: [formTemplateId], references: [id])
  student        Student?     @relation(fields: [studentId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])

  @@map("form_submissions")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  location    String?
  startAt     DateTime
  endAt       DateTime
  capacity    Int?
  priceCents  Int?
  createdAt   DateTime @default(now())

  @@map("events")
}

model WebhookEvent {
  id          String    @id @default(uuid())
  provider    String
  eventId     String
  type        String
  payloadJson Json
  processedAt DateTime?
  status      String    @default("pending")
  retries     Int       @default(0)
  createdAt   DateTime  @default(now())

  @@map("webhook_events")
}

model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String?
  action      String
  targetTable String
  targetId    String?
  diffJson    Json?
  ipAddress   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  content   String
  type      String
  priority  String    @default("medium")
  isRead    Boolean   @default(false)
  dataJson  Json?
  createdAt DateTime  @default(now())
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Announcement {
  id                String             @id @default(uuid())
  title             String
  content           String
  authorId          String
  priority          String             @default("medium")
  isPublished       Boolean            @default(true)
  publishedAt       DateTime           @default(now())
  expiresAt         DateTime?
  createdAt         DateTime           @default(now())
  author            User               @relation(fields: [authorId], references: [id])
  userNotifications UserNotification[]

  @@map("announcements")
}

model UserNotification {
  userId         String
  announcementId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, announcementId])
  @@map("user_announcements")
}

enum Temperament {
  calm
  spirited
  green
  steady
}

enum SlotStatus {
  open
  held
  booked
  closed
}

enum BookingStatus {
  booked
  completed
  cancelled
  no_show
}

enum OrderStatus {
  pending
  paid
  fulfilled
  cancelled
}

enum ProductType {
  merch
  digital
  gift_card
}
